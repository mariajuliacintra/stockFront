import { useState, useEffect } from 'react';
import {
Â  Modal,
Â  Box,
Â  Typography,
Â  TextField,
Â  Button,
Â  CircularProgress,
Â  MenuItem,
Â  InputAdornment,
} from '@mui/material';
import {
Â  Â  PersonOutline,
Â  Â  Email,
Â  Â  WorkOutline,
} from '@mui/icons-material';
import sheets from '../../services/axios';

// --- FunÃ§Ã£o de Utilidade para o LocalStorage (SincronizaÃ§Ã£o do Header) ---

/**
 * Verifica se o usuÃ¡rio editado Ã© o usuÃ¡rio logado. Se for, atualiza a role no localStorage.
 * Isso garante que o HeaderPerfil (que lÃª o localStorage) seja atualizado, fazendo o Ã­cone desaparecer.
 * @param {object} updatedUser - Dados do usuÃ¡rio apÃ³s a atualizaÃ§Ã£o (apenas idUser e role sÃ£o essenciais).
 */
const updateLocalStorageRole = (updatedUser) => {
    try {
        const currentUserString = localStorage.getItem('user');
        if (!currentUserString) return;

        const currentUser = JSON.parse(currentUserString);

        // 1. Verifica se o ID do usuÃ¡rio editado Ã© igual ao ID do usuÃ¡rio logado
        if (currentUser.idUser === updatedUser.idUser) {
            // 2. Atualiza a role e salva de volta no localStorage
            const updatedLocalStorageUser = { 
                ...currentUser, 
                role: updatedUser.role 
            };
            localStorage.setItem('user', JSON.stringify(updatedLocalStorageUser));
            
            // 3. Dispara o evento 'storage' para notificar o HeaderPerfil
            window.dispatchEvent(new Event('storage'));
        }
    } catch (e) {
        console.error("Erro ao sincronizar a role no localStorage:", e);
    }
};


// DefiniÃ§Ã£o dos estilos baseados no seu Register/CreateUserModal
const modalStyles = {
Â  position: 'absolute',
Â  top: '50%',
Â  left: '50%',
Â  transform: 'translate(-50%, -50%)',
Â  width: 400,
Â  bgcolor: 'background.paper',
Â  borderRadius: '15px', 
Â  boxShadow: '0px 4px 15px rgba(0, 0, 0, 0.1)', 
Â  p: 4,
Â  display: 'flex',
Â  flexDirection: 'column',
Â  gap: 1, 
};

const EditUserModal = ({ open, onClose, user, onSuccess, onAlert }) => {
Â  const [editedUser, setEditedUser] = useState(user);
Â  const [loading, setLoading] = useState(false);

Â  useEffect(() => {
Â  Â  // Garante que o estado seja atualizado com o usuÃ¡rio mais recente
Â  Â  setEditedUser(user);
Â  }, [user]);

Â  const handleChange = (e) => {
Â  Â  const { name, value } = e.target;
Â  Â  setEditedUser({ ...editedUser, [name]: value });
Â  };

Â  const handleSave = async () => {
Â  Â  if (!editedUser || !editedUser.idUser) {
Â  Â  Â  onAlert('NÃ£o foi possÃ­vel encontrar o usuÃ¡rio para atualizaÃ§Ã£o.', 'error');
Â  Â  Â  return;
Â  Â  }

Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  const dataToUpdate = {
Â  Â  Â  Â  name: editedUser.name,
Â  Â  Â  Â  role: editedUser.role,
Â  Â  Â  };
Â  Â  Â  
Â  Â  Â  const response = await sheets.updateUser(editedUser.idUser, dataToUpdate);

Â  Â  Â  if (response.data.success) {
Â  Â  Â  Â  onAlert(response.data.message || 'UsuÃ¡rio atualizado com sucesso!', 'success'); 
Â  Â  Â  Â  
        // ðŸš¨ NOVO BLOCO DE SINCRONIZAÃ‡ÃƒO ðŸš¨
        const updatedUserData = {
            idUser: editedUser.idUser,
            name: editedUser.name,
            role: editedUser.role, // O novo cargo
        };
        
        // Sincroniza o localStorage: se o usuÃ¡rio logado foi rebaixado, o localStorage muda.
        updateLocalStorageRole(updatedUserData); 
        // ------------------------------------
        
Â  Â  Â  Â  onSuccess(); // Recarrega a lista na pÃ¡gina de Gerenciamento
Â  Â  Â  Â  onClose(); // Fecha a modal

Â  Â  Â  } else {
Â  Â  Â  Â  onAlert(response.data.error || 'Erro ao atualizar usuÃ¡rio.', 'error');
Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  console.error('Erro ao atualizar usuÃ¡rio:', error);
Â  Â  Â  onAlert(error.response?.data?.error || 'Erro interno do servidor.', 'error');
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  if (!user) return null;

Â  return (
Â  Â  <Modal open={open} onClose={onClose}>
Â  Â  Â  <Box sx={modalStyles}>
Â  Â  Â  Â  <Typography variant="h6" component="h2">
Â  Â  Â  Â  Â  Editar UsuÃ¡rio
Â  Â  Â  Â  </Typography>

Â  Â  Â  Â  {/* CAMPO NOME */}
Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  label="Nome"
Â  Â  Â  Â  Â  name="name"
Â  Â  Â  Â  Â  value={editedUser?.name || ''}
Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  margin="normal"
Â  Â  Â  Â  Â  sx={getRegisterFieldStyles().textField}
Â  Â  Â  Â  Â  InputProps={{
Â  Â  Â  Â  Â  Â  startAdornment: (
Â  Â  Â  Â  Â  Â  Â  <InputAdornment position="start">
Â  Â  Â  Â  Â  Â  Â  Â  <PersonOutline sx={{ color: "gray" }} />
Â  Â  Â  Â  Â  Â  Â  </InputAdornment>
Â  Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  />
Â  Â  Â  Â  
Â  Â  Â  Â  {/* CAMPO E-MAIL (Desabilitado) */}
Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  label="E-mail"
Â  Â  Â  Â  Â  name="email"
Â  Â  Â  Â  Â  value={editedUser?.email || ''}
Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  disabled
Â  Â  Â  Â  Â  margin="normal"
Â  Â  Â  Â  Â  sx={getRegisterFieldStyles().textField}
Â  Â  Â  Â  Â  InputProps={{
Â  Â  Â  Â  Â  Â  startAdornment: (
Â  Â  Â  Â  Â  Â  Â  <InputAdornment position="start">
Â  Â  Â  Â  Â  Â  Â  Â  <Email sx={{ color: "gray" }} />
Â  Â  Â  Â  Â  Â  Â  </InputAdornment>
Â  Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  />

Â  Â  Â  Â  {/* CAMPO CARGO (SELECT) */}
Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  select
Â  Â  Â  Â  Â  label="Cargo"
Â  Â  Â  Â  Â  name="role"
Â  Â  Â  Â  Â  value={editedUser?.role || 'user'}
Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  margin="normal"
Â  Â  Â  Â  Â  sx={getRegisterFieldStyles().textField}
Â  Â  Â  Â  Â  InputProps={{
Â  Â  Â  Â  Â  Â  startAdornment: (
Â  Â  Â  Â  Â  Â  Â  <InputAdornment position="start">
Â  Â  Â  Â  Â  Â  Â  Â  <WorkOutline sx={{ color: "gray" }} />
Â  Â  Â  Â  Â  Â  Â  </InputAdornment>
Â  Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <MenuItem value="manager">Admin</MenuItem> 
Â  Â  Â  Â  Â  <MenuItem value="user">Comum</MenuItem>
Â  Â  Â  Â  </TextField>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Box de BotÃµes */}
Â  Â  Â  Â  <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, mt: 3 }}>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  onClick={onClose}
Â  Â  Â  Â  Â  Â  variant="outlined"
Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  Â  sx={{
Â  Â  Â  Â  Â  Â  Â  Â  ...getRegisterFieldStyles().buttonToLogin,
Â  Â  Â  Â  Â  Â  Â  Â  border: '1px solid rgba(255, 0, 0, 1)',
Â  Â  Â  Â  Â  Â  Â  Â  color: 'rgba(255, 0, 0, 1)',
Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: 'transparent',
Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: '8px', 
Â  Â  Â  Â  Â  Â  Â  Â  height: 30, 
Â  Â  Â  Â  Â  Â  Â  Â  fontWeight: 600,
Â  Â  Â  Â  Â  Â  Â  Â  fontSize: 14,
Â  Â  Â  Â  Â  Â  Â  Â  padding: '0 16px',
Â  Â  Â  Â  Â  Â  Â  Â  textTransform: 'none',
Â  Â  Â  Â  Â  Â  Â  Â  '&:hover': {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: 'rgba(255, 0, 0, 0.04)',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  border: '1px solid rgba(255, 0, 0, 1)',
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Cancelar
Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  onClick={handleSave}
Â  Â  Â  Â  Â  Â  variant="contained"
Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  Â  sx={{...getRegisterFieldStyles().buttonCadastro, width: 'auto', padding: '0 16px', mt: 0}}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {loading ? <CircularProgress size={24} sx={{ color: "white" }} /> : 'Salvar AlteraÃ§Ãµes'}
Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  </Box>
Â  Â  Â  </Box>
Â  Â  </Modal>
Â  );
};

function getRegisterFieldStyles() {
Â  Â  return {
Â  Â  Â  Â  textField: {
Â  Â  Â  Â  Â  Â  mb: 1,
Â  Â  Â  Â  Â  Â  "& .MuiOutlinedInput-root": {
Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: "8px",
Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: "#f5f5f5",
Â  Â  Â  Â  Â  Â  Â  Â  "& fieldset": {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  borderColor: "transparent",
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  "&:hover fieldset": {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  borderColor: "transparent",
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  "&.Mui-focused fieldset": {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  borderColor: "rgba(255, 0, 0, 0.5)",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  borderWidth: "1px",
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  "& .MuiInputBase-input": {
Â  Â  Â  Â  Â  Â  Â  Â  padding: "8px 10px",
Â  Â  Â  Â  Â  Â  Â  Â  fontSize: "14px",
Â  Â  Â  Â  Â  Â  Â  Â  color: "#333",
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  "& .MuiInputLabel-root": {
Â  Â  Â  Â  Â  Â  Â  Â  fontSize: "14px",
Â  Â  Â  Â  Â  Â  Â  Â  color: "gray",
Â  Â  Â  Â  Â  Â  Â  Â  "&.Mui-focused": {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: "rgba(255, 0, 0, 1)",
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  },
Â  Â  Â  Â  buttonCadastro: {
Â  Â  Â  Â  Â  Â  "&.MuiButton-root": {
Â  Â  Â  Â  Â  Â  Â  Â  border: "none",
Â  Â  Â  Â  Â  Â  Â  Â  boxShadow: "none",
Â  Â  Â  Â  Â  Â  Â  Â  "&:hover": {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: "rgba(200, 0, 0, 1)",
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  color: "white",
Â  Â  Â  Â  Â  Â  backgroundColor: "rgba(255, 0, 0, 1)",
Â  Â  Â  Â  Â  Â  height: 30,
Â  Â  Â  Â  Â  Â  fontWeight: 600,
Â  Â  Â  Â  Â  Â  fontSize: 14,
Â  Â  Â  Â  Â  Â  borderRadius: 8,
Â  Â  Â  Â  Â  Â  textTransform: "none",
Â  Â  Â  Â  },
Â  Â  Â  Â  buttonToLogin: {
Â  Â  Â  Â  Â  Â  color: "rgba(255, 0, 0, 1)",
Â  Â  Â  Â  Â  Â  backgroundColor: "transparent",
Â  Â  Â  Â  Â  Â  fontWeight: 600,
Â  Â  Â  Â  Â  Â  fontSize: 14,
Â  Â  Â  Â  Â  Â  textDecoration: "none",
Â  Â  Â  Â  Â  Â  textTransform: "none",
Â  Â  Â  Â  }
Â  Â  };
}

export default EditUserModal;